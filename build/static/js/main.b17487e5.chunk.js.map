{"version":3,"sources":["components/Container/Container.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["Container","className","children","title","ContactForm","state","name","id","number","inputName","event","currentTarget","value","setState","shortId","generate","handleSubmit","preventDefault","nameValue","defaultValue","props","existingNames","includes","alert","onSubmit","reset","this","htmlFor","type","pattern","required","onChange","Component","Filter","ContactList","passArray","onRemove","map","onClick","App","contacts","initialContacts","filter","addContact","newContact","handleFilter","getSearchingContacts","normalizedFilter","toLowerCase","contact","getAllNames","removeContact","contactId","prevState","prebProps","localStorage","setItem","JSON","stringify","getItem","parsedContacts","parse","visibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b17487e5.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Container = ({ className, children, title }) => (\r\n    <div className={className}>\r\n        <h2>{title}</h2>\r\n        {children}\r\n    </div>\r\n);\r\n\r\nContainer.propTypes = {\r\n    className: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.any.isRequired,\r\n};\r\n\r\nexport default Container;\r\n","import React, { Component } from 'react';\r\nimport shortId from 'shortid';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ContactForm extends Component {\r\n    static propTypes = {\r\n        onSubmit: PropTypes.func.isRequired,\r\n        existingNames: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    };\r\n    state = {\r\n        name: '',\r\n        id: '',\r\n        number: '',\r\n    };\r\n    inputName = event => {\r\n        const { value, name } = event.currentTarget;\r\n        this.setState({\r\n            [name]: value,\r\n            id: shortId.generate(),\r\n        });\r\n    };\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        const nameValue = event.currentTarget[0].defaultValue;\r\n        if (!this.props.existingNames.includes(nameValue)) {\r\n            this.props.onSubmit(this.state);\r\n            this.reset();\r\n        } else {\r\n            alert('This name has been already existing, try another one!');\r\n        }\r\n    };\r\n    reset = () => {\r\n        this.setState({ name: '', id: '', number: '' });\r\n    };\r\n    render() {\r\n        const { handleSubmit, inputName } = this;\r\n        const { id, name, number } = this.state;\r\n        return (\r\n            <>\r\n                <form onSubmit={handleSubmit}>\r\n                    <label htmlFor={id} className=\"label name\">\r\n                        Name\r\n                    </label>\r\n                    <input\r\n                        className=\"input\"\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        id={id}\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов.\"\r\n                        required\r\n                        onChange={inputName}\r\n                        value={name}\r\n                    />\r\n                    <label htmlFor={id} className=\"label number\">\r\n                        Number\r\n                    </label>\r\n                    <input\r\n                        className=\"input\"\r\n                        type=\"tel\"\r\n                        name=\"number\"\r\n                        id={id}\r\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                        required\r\n                        onChange={inputName}\r\n                        value={number}\r\n                    />\r\n                    <button type=\"submit\">Add contact</button>\r\n                </form>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContactForm;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n    <>\r\n        <label htmlFor=\"filter\" className=\"label search\">\r\n            Search Contact\r\n        </label>\r\n        <input\r\n            value={value}\r\n            name=\"filter\"\r\n            onChange={onChange}\r\n            className=\"input\"\r\n        />\r\n    </>\r\n);\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactList = ({ passArray, onRemove }) => {\r\n    return (\r\n        <>\r\n            <ul className=\"contact-list\">\r\n                {passArray.map(({ id, name, number }) => (\r\n                    <li key={id} id={id}>\r\n                        <p className=\"text-name\">{name}</p>\r\n                        <p className=\"text-number\">{number}</p>\r\n                        <button\r\n                            className=\"btn-delete\"\r\n                            onClick={() => onRemove(id)}\r\n                        >\r\n                            X\r\n                        </button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </>\r\n    );\r\n};\r\n\r\nContactList.propTypes = {\r\n    passArray: PropTypes.array.isRequired,\r\n    onRemove: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import React, { Component } from 'react';\nimport initialContacts from './contacts.json';\nimport Container from './components/Container';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\nimport './styles/main.scss';\n\nclass App extends Component {\n    state = {\n        contacts: initialContacts,\n        filter: '',\n    };\n    componentDidUpdate(prebProps, prevState) {\n        if (this.state.contacts !== prevState.contacts) {\n            localStorage.setItem(\n                'contacts',\n                JSON.stringify(this.state.contacts),\n            );\n        }\n    }\n    componentDidMount() {\n        const contacts = localStorage.getItem('contacts');\n        const parsedContacts = JSON.parse(contacts);\n        if (parsedContacts) {\n            this.setState({ contacts: parsedContacts });\n        }\n    }\n    addContact = ({ name, id, number }) => {\n        const newContact = {\n            name,\n            id,\n            number,\n        };\n        this.setState(({ contacts }) => ({\n            contacts: [newContact, ...contacts],\n        }));\n    };\n    handleFilter = event => {\n        this.setState({ filter: event.currentTarget.value });\n    };\n    getSearchingContacts = () => {\n        const { contacts, filter } = this.state;\n        const normalizedFilter = filter.toLowerCase();\n        return contacts.filter(contact =>\n            contact.name.toLowerCase().includes(normalizedFilter),\n        );\n    };\n    getAllNames = () => {\n        return this.state.contacts.map(contact => contact.name);\n    };\n    removeContact = contactId => {\n        this.setState(prevState => ({\n            contacts: prevState.contacts.filter(\n                contact => contact.id !== contactId,\n            ),\n        }));\n    };\n    render() {\n        const {\n            state,\n            handleFilter,\n            addContact,\n            getSearchingContacts,\n            getAllNames,\n            removeContact,\n        } = this;\n        const visibleContacts = getSearchingContacts();\n        return (\n            <>\n                <Container className=\"phonebook-cont\" title=\"Phonebook\">\n                    <ContactForm\n                        onSubmit={addContact}\n                        existingNames={getAllNames()}\n                    />\n                </Container>\n                <Container className=\"contacts-cont\" title=\"Contacts\">\n                    <Filter value={state.filter} onChange={handleFilter} />\n                    <ContactList\n                        passArray={visibleContacts}\n                        onRemove={removeContact}\n                    />\n                </Container>\n            </>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}