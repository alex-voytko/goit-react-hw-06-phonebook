{"version":3,"sources":["components/Container/Container.js","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["Container","className","children","title","defaultProps","addContact","createAction","removeContact","changeFilter","ContactForm","state","name","id","number","inputName","event","currentTarget","value","setState","shortId","generate","handleSubmit","preventDefault","defaultValue","props","onSubmit","console","log","reset","this","htmlFor","type","pattern","required","onChange","Component","connect","dispatch","data","contactsActions","getSearchingContacts","allContacts","filter","normalizedFilter","toLowerCase","contact","includes","contacts","items","onRemove","map","onClick","e","App","createReducer","initialContacts","actions","action","find","payload","alert","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.af3986ae.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Container = ({ className, children, title }) => (\r\n    <div className={className}>\r\n        <h2>{title}</h2>\r\n        {children}\r\n    </div>\r\n);\r\n\r\nContainer.defaultProps = {\r\n    children: null,\r\n};\r\n\r\nContainer.propTypes = {\r\n    className: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.any,\r\n};\r\n\r\nexport default Container;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContact = createAction('contacts/add');\r\nconst removeContact = createAction('contacts/remove');\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nexport default { addContact, removeContact, changeFilter };\r\n\r\n// const addContact = ({ name, number, id }) => ({\r\n//     type: types.ADD,\r\n//     payload: { name, number, id },\r\n// });\r\n// const removeContact = contactId => ({\r\n//     type: types.REMOVE,\r\n//     payload: contactId,\r\n// });\r\n// const changeFilter = value => ({\r\n//     type: types.CHANGE_FILTER,\r\n//     payload: value,\r\n// });\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport shortId from 'shortid';\r\nimport PropTypes from 'prop-types';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\n\r\nclass ContactForm extends Component {\r\n    static propTypes = {\r\n        onSubmit: PropTypes.func.isRequired,\r\n    };\r\n    state = {\r\n        name: '',\r\n        id: '',\r\n        number: '',\r\n    };\r\n    inputName = event => {\r\n        const { value, name } = event.currentTarget;\r\n        this.setState({\r\n            [name]: value,\r\n            id: shortId.generate(),\r\n        });\r\n    };\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        const nameValue = event.currentTarget[0].defaultValue;\r\n        this.props.onSubmit(this.state);\r\n        console.log(this.state);\r\n        this.reset();\r\n    };\r\n    reset = () => {\r\n        this.setState({ name: '', id: '', number: '' });\r\n    };\r\n    render() {\r\n        const { handleSubmit, inputName } = this;\r\n        const { id, name, number } = this.state;\r\n        return (\r\n            <>\r\n                <form onSubmit={handleSubmit}>\r\n                    <label htmlFor={id} className=\"label name\">\r\n                        Name\r\n                    </label>\r\n                    <input\r\n                        className=\"input\"\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        id={id}\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов.\"\r\n                        required\r\n                        onChange={inputName}\r\n                        value={name}\r\n                    />\r\n                    <label htmlFor={id} className=\"label number\">\r\n                        Number\r\n                    </label>\r\n                    <input\r\n                        className=\"input\"\r\n                        type=\"tel\"\r\n                        name=\"number\"\r\n                        id={id}\r\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                        required\r\n                        onChange={inputName}\r\n                        value={number}\r\n                    />\r\n                    <button type=\"submit\">Add contact</button>\r\n                </form>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSubmit: data => dispatch(contactsActions.addContact(data)),\r\n    };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\n\r\nconst ContactList = ({ contacts, onRemove }) => {\r\n    return (\r\n        <>\r\n            <ul className=\"contact-list\">\r\n                {contacts.map(({ id, name, number }) => (\r\n                    <li key={id} id={id}>\r\n                        <p className=\"text-name\">{name}</p>\r\n                        <p className=\"text-number\">{number}</p>\r\n                        <button\r\n                            className=\"btn-delete\"\r\n                            onClick={() => onRemove(id)}\r\n                        >\r\n                            X\r\n                        </button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </>\r\n    );\r\n};\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    onRemove: PropTypes.func.isRequired,\r\n};\r\nconst getSearchingContacts = (allContacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return allContacts.filter(contact =>\r\n        contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n};\r\nconst mapStateToProps = state => {\r\n    const { filter, items } = state.contacts;\r\n    return {\r\n        contacts: getSearchingContacts(items, filter),\r\n    };\r\n};\r\nconst mapDispatchToProps = dispatch => ({\r\n    onRemove: id => dispatch(contactsActions.removeContact(id)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n    <>\r\n        <label htmlFor=\"filter\" className=\"label search\">\r\n            Search Contact\r\n        </label>\r\n        <input\r\n            value={value}\r\n            name=\"filter\"\r\n            onChange={onChange}\r\n            className=\"input\"\r\n        />\r\n    </>\r\n);\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    value: state.contacts.filter,\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: e =>\r\n        dispatch(contactsActions.changeFilter(e.currentTarget.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\n// import initialContacts from './contacts.json';\nimport Container from './components/Container';\nimport ContactForm from './components/ContactForm';\n// import Filter from './components/Filter';\nimport ContactList from './components/ContactList';\nimport './styles/main.scss';\nimport Filter from './components/Filter/Filter';\n\nconst App = () => {\n    // state = {\n    //     // contacts: initialContacts,\n    //     // filter: '',\n    // };\n    // componentDidUpdate(prebProps, prevState) {\n    //     if (this.state.contacts !== prevState.contacts) {\n    //         localStorage.setItem(\n    //             'contacts',\n    //             JSON.stringify(this.state.contacts),\n    //         );\n    //     }\n    // }\n    // componentDidMount() {\n    //     const contacts = localStorage.getItem('contacts');\n    //     const parsedContacts = JSON.parse(contacts);\n    //     if (parsedContacts) {\n    //         this.setState({ contacts: parsedContacts });\n    //     }\n    // }\n    // addContact = ({ name, id, number }) => {\n    //     const newContact = {\n    //         name,\n    //         id,\n    //         number,\n    //     };\n    //     this.setState(({ contacts }) => ({\n    //         contacts: [newContact, ...contacts],\n    //     }));\n    // };\n    // handleFilter = event => {\n    //     this.setState({ filter: event.currentTarget.value });\n    // };\n    // getSearchingContacts = () => {\n    //     const { contacts, filter } = this.state;\n    //     const normalizedFilter = filter.toLowerCase();\n    //     return contacts.filter(contact =>\n    //         contact.name.toLowerCase().includes(normalizedFilter),\n    //     );\n    // };\n    // getAllNames = () => {\n    //     return this.state.contacts.map(contact => contact.name);\n    // };\n    // removeContact = contactId => {\n    //     this.setState(prevState => ({\n    //         contacts: prevState.contacts.filter(\n    //             contact => contact.id !== contactId,\n    //         ),\n    //     }));\n    // };\n    return (\n        <>\n            <Container className=\"phonebook-cont\" title=\"Phonebook\">\n                <ContactForm />\n            </Container>\n            <Container className=\"contacts-cont\" title=\"Contacts\">\n                <Filter />\n                <ContactList />\n            </Container>\n        </>\n    );\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-actions';\r\nimport initialContacts from '../../contacts.json';\r\n\r\nconst items = createReducer([...initialContacts], {\r\n    [actions.addContact]: (state, action) => {\r\n        const nameExistCheck = state.find(\r\n            contact => contact.name === action.payload.name,\r\n        );\r\n        return !nameExistCheck\r\n            ? [...state, action.payload]\r\n            : alert('This name has already exists, try another one!');\r\n    },\r\n\r\n    [actions.removeContact]: (state, action) =>\r\n        state.filter(contact => contact.id !== action.payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [actions.changeFilter]: (state, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n});\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//     switch (type) {\r\n//         case types.ADD:\r\n//             return [...state, payload];\r\n\r\n//         case types.REMOVE:\r\n//             return state.filter(contact => contact.id !== payload);\r\n\r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n// const filter = (state = '', { type, payload }) => {\r\n//     switch (type) {\r\n//         case types.CHANGE_FILTER:\r\n//             return payload;\r\n\r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n","import contactsReducer from './contacts/contacts-reducer';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n    persistStore,\r\n    persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }),\r\n    logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n    key: 'contacts',\r\n    storage,\r\n    blacklist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n    },\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store.store}>\n            <PersistGate loading={null} persistor={store.persistor}>\n                <App />\n            </PersistGate>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}